todosOsDados.push({
    tituloPrincipal: "Engenharia de requisitos - conceitos básicos",
    conceitos: [
        {
            id: 1,
            titulo: "Definição de Requisito e suas Distinções",
            teoria: `
                <p>Um <strong>requisito</strong> é uma condição ou capacidade que precisa ser atendida ou possuída por um sistema para satisfazer um contrato, padrão, especificação ou outro documento formalmente imposto. O ponto nevrálgico explorado pela Cebraspe reside na sutil, porém crucial, diferença entre <strong>requisitos</strong>, <strong>desejos</strong> e <strong>restrições</strong>.</p>
                <ul>
                    <li><strong>Requisito</strong>: É mandatório, uma necessidade formalizada e não negociável. Ex: "O sistema deve permitir o cadastro de novos clientes."</li>
                    <li><strong>Desejo</strong>: É uma preferência do usuário ou stakeholder. Se não for atendido, não invalida o sistema, mas sua implementação agrega valor. Ex: "Eu gostaria que o botão de salvar fosse verde."</li>
                    <li><strong>Restrição (Constraint)</strong>: É uma limitação sobre as opções de desenvolvimento, impondo como o sistema deve ser construído ou o ambiente em que deve operar. Frequentemente confundida com requisitos não funcionais. Ex: "O sistema deve ser desenvolvido em Python" ou "A resposta do banco de dados não deve exceder 50ms."</li>
                </ul>
                <p>A banca frequentemente elabora questões que apresentam uma restrição técnica e a classificam como um requisito funcional, ou tratam um mero desejo do cliente como um requisito formal do sistema.</p>`,
            analogiaPokemon: `Um <strong>requisito</strong> é a ordem do Professor Carvalho para que você "complete a Pokédex capturando os 150 Pokémon originais" — é a missão principal e obrigatória. Um <strong>desejo</strong> é você querer que seu Charizard aprenda o golpe "Fly" — seria muito útil e legal, mas não é estritamente necessário para completar a Pokédex. Uma <strong>restrição</strong> é ter que realizar essa missão sem poder usar a "Master Ball" — é uma limitação imposta sobre como você pode atingir seu objetivo.`,
            assertiva: {
                fonte: "(CESPE/CEBRASPE - STJ/2025 - Adaptada)",
                texto: "A solicitação da área de negócios para que um novo sistema de gestão de documentos seja compatível com o sistema operacional legado da empresa, que opera exclusivamente em 32 bits, representa um requisito funcional essencial, uma vez que impacta diretamente a forma como o sistema executará suas funções para o usuário."
            },
            analise: {
                gabarito: "ERRADO",
                explicacao: "A assertiva está incorreta. A necessidade de compatibilidade com um sistema operacional específico (legado e de 32 bits) não descreve *o que o sistema faz* (uma função), mas sim uma condição ou limitação sob a qual ele deve operar. Isso se classifica como uma **restrição** ou, mais especificamente, um requisito não funcional de portabilidade/compatibilidade. A maldade da questão está em usar o termo \"impacta diretamente a forma como o sistema executará suas funções\", uma formulação que induz o candidato a associar a afirmação a um requisito funcional. O conhecimento exigido é a clara distinção entre funcionalidades (o \"quê\") e restrições/atributos de qualidade (o \"como\" ou \"sob quais condições\")."
            }
        },
        {
            id: 2,
            titulo: "Requisitos Funcionais vs. Não Funcionais",
            teoria: `<p><strong>Requisitos Funcionais (RF)</strong> descrevem o que o sistema <strong>deve fazer</strong>: os serviços, os cálculos, as transformações de dados e os comportamentos específicos. Eles são a essência do sistema, geralmente expressos como ações ou verbos. Ex: "O sistema <em>deve permitir</em> que o gerente <em>aprove</em> as despesas".</p><p><strong>Requisitos Não Funcionais (RNF)</strong>, por outro lado, descrevem <strong>como</strong> o sistema deve realizar suas funções. Eles são critérios de qualidade, restrições e propriedades emergentes do sistema como um todo, como desempenho, segurança, usabilidade, confiabilidade e portabilidade. Ex: "O sistema deve responder a qualquer consulta em menos de 2 segundos" (desempenho) ou "Apenas usuários com perfil de administrador podem aprovar despesas" (segurança).</p><p>A pegadinha clássica da Cebraspe é redigir um requisito funcional que serve a um propósito não funcional (como segurança) e classificá-lo como não funcional, ou vice-versa.</p>`,
            analogiaPokemon: `Um <strong>requisito funcional</strong> do Pokémon Blastoise é usar o golpe "Hydro Pump" para atacar o oponente. É uma ação específica, uma <em>função</em> que ele executa. Os <strong>requisitos não funcionais</strong> associados são a <em>precisão</em> de 80% do golpe (confiabilidade), o fato de que o golpe tem apenas 5 PP (uso de recursos/desempenho) e que ele atinge apenas um alvo (restrição de operação). A ação de "lançar água" é funcional; as condições e qualidades dessa ação são não funcionais.`,
            assertiva: {
                fonte: "(CESPE/CEBRASPE - Polícia Federal/2024 - Adaptada)",
                texto: "No desenvolvimento de um sistema de investigação criminal, a especificação de que o sistema deve criptografar todos os dados sigilosos antes de seu armazenamento no banco de dados é um exemplo de requisito não funcional, visto que se refere diretamente ao atributo de qualidade de segurança."
            },
            analise: {
                gabarito: "ERRADO",
                explicacao: "A assertiva está incorreta. A ação de **\"criptografar dados\"** é um processo, uma transformação que o sistema deve ativamente executar. Trata-se de um comportamento, uma função específica. Portanto, é classificado como um **requisito funcional**. Embora o propósito dessa função seja garantir a segurança (um atributo de qualidade, ou seja, um RNF), a atividade em si é funcional. A maldade da banca consiste em induzir o candidato a focar no *propósito* (segurança, um RNF) em vez da *ação* descrita (criptografar, um RF). O conhecimento fundamental é que, se a especificação descreve uma ação, um processamento ou uma transformação que o sistema precisa realizar, ela é funcional, independentemente de seu objetivo final ser a satisfação de um critério não funcional."
            }
        },
        {
            id: 3,
            titulo: "Níveis de Requisitos: Usuário, Sistema e Domínio",
            teoria: `<p>Os requisitos são documentados em diferentes níveis de detalhe, cada um com um público-alvo distinto.</p><ul><li><strong>Requisitos de Usuário</strong>: São declarações de alto nível, em linguagem natural ou diagramas, que descrevem os serviços que o sistema deve fornecer e as restrições sob as quais deve operar. São voltados para o cliente e o usuário final. Exemplo: "O sistema deve permitir a busca de processos por número ou pelo nome das partes."</li><li><strong>Requisitos de Sistema</strong>: Fornecem uma descrição detalhada e estruturada das funções, serviços e restrições do sistema. Servem de base para o contrato de desenvolvimento e são direcionados à equipe técnica. É a "tradução" dos requisitos de usuário para uma linguagem mais precisa. Exemplo: "1. A função de busca (FUNC-05) deve apresentar um campo de texto. 1.1 Se a entrada for numérica, o sistema deve executar a query X na tabela Y. 1.2 Se for texto, deve executar a query Z..."</li><li><strong>Requisitos de Domínio</strong>: São requisitos que derivam do domínio da aplicação, e não das necessidades específicas do usuário. Eles podem ser leis, padrões setoriais, princípios físicos ou regras de negócio consolidadas. Exemplo: "O cálculo da alíquota de ICMS para o produto deve seguir a tabela de substituição tributária definida pelo CONFAZ."</li></ul><p>A Cebraspe costuma criar assertivas que confundem esses níveis, apresentando um requisito de sistema (detalhado e estruturado) como se fosse de usuário, ou, mais sutilmente, tratando um requisito de domínio (uma regra externa e inegociável) como uma simples necessidade do usuário.</p>`,
            analogiaPokemon: `<ul><li><strong>Requisito de Usuário</strong>: O treinador Ash diz ao Professor Carvalho: "Eu preciso de um meio de iluminar cavernas escuras durante minha jornada". É um objetivo geral, uma necessidade.</li><li><strong>Requisito de Sistema</strong>: O Professor Carvalho especifica para o desenvolvimento do "Kit de Treinador": "O sistema (Pokémon) deve ser capaz de aprender a técnica 'Flash' (TM70). Quando ativada em uma caverna, a técnica deve aumentar o raio de visão do jogador de 3 para 10 tiles no mapa." É a descrição técnica e detalhada de como a necessidade de Ash será atendida.</li><li><strong>Requisito de Domínio</strong>: Para usar a técnica 'Flash' e iluminar uma caverna, o treinador <strong>deve</strong> primeiro ter conquistado a Insígnia da Rocha no ginásio de Pewter. Isso não é um desejo de Ash nem uma decisão do Professor; é uma regra fundamental do "domínio" da Liga Pokémon de Kanto.</li></ul>`,
            assertiva: {
                fonte: "(CESPE/CEBRASPE - TCE/RJ/2025 - Adaptada)",
                texto: "No projeto de um sistema para o setor farmacêutico, a especificação de que \"o sistema deve impedir a venda de medicamentos controlados sem a retenção digital da receita médica, conforme a Portaria SVS/MS n.º 344/98\" constitui um requisito de sistema, pois detalha uma funcionalidade essencial para a operação do software."
            },
            analise: {
                gabarito: "ERRADO",
                explicacao: "A assertiva está incorreta. A exigência descrita, embora seja uma funcionalidade do sistema, tem sua origem em uma regulamentação externa e específica do setor de saúde (a Portaria da ANVISA). Portanto, ela é primariamente classificada como um **requisito de domínio**. Esses requisitos são impostos pelo ambiente (legal, regulatório, físico) onde o sistema irá operar e não são negociáveis. A maldade da questão está em focar no fato de que é uma \"funcionalidade essencial\" (o que é verdade) para induzir à classificação de \"requisito de sistema\", ignorando a origem da regra, que é o critério definidor para um requisito de domínio."
            }
        },
        {
            id: 4,
            titulo: "Fases do Processo de Engenharia de Requisitos",
            teoria: `<p>O processo de Engenharia de Requisitos (ER) não é um fluxo linear, mas um conjunto de atividades iterativas e sobrepostas. As fases principais são:</p><ol><li><strong>Elicitação (ou Levantamento)</strong>: É a fase de descoberta, onde os requisitos são coletados a partir de diversas fontes, incluindo stakeholders, documentos e sistemas existentes. O desafio é identificar requisitos implícitos e resolver ambiguidades iniciais.</li><li><strong>Análise e Negociação</strong>: Os requisitos elicitados são analisados quanto à consistência, completude e viabilidade. Conflitos entre requisitos de diferentes stakeholders são identificados e resolvidos por meio de negociação e priorização.</li><li><strong>Especificação (ou Documentação)</strong>: Os requisitos acordados são formalizados em um documento, como a Especificação de Requisitos de Software (ERS). A clareza, a precisão e a falta de ambiguidade são os objetivos principais desta fase.</li><li><strong>Validação</strong>: Assegura que os requisitos especificados são os corretos, ou seja, que eles realmente atendem às necessidades do cliente e que o sistema proposto resolverá o problema real. A pergunta-chave é: "Estamos construindo o produto certo?". Técnicas comuns incluem revisões, prototipação e inspeções.</li><li><strong>Gerenciamento</strong>: Envolve todas as atividades relacionadas ao controle de mudanças nos requisitos ao longo do ciclo de vida do projeto, incluindo rastreabilidade (ligar requisitos a suas fontes e artefatos de projeto) e controle de versão.</li></ol><p>A Cebraspe costuma tratar o processo como estritamente sequencial (modelo cascata) e, principalmente, troca os objetivos das fases (ex: dizer que a validação serve para documentar, ou que a elicitação serve para negociar conflitos).</p>`,
            analogiaPokemon: `Imagine que a "Liga Pokémon" é o projeto de software. <br><strong>1. Elicitação</strong>: Você, como treinador, viaja pela região de Kanto e <em>conversa</em> com os Líderes de Ginásio, o Professor Carvalho e outros treinadores (stakeholders) para <em>descobrir</em> o que é necessário para se tornar um campeão (levantar os requisitos). <br><strong>2. Análise e Negociação</strong>: Você percebe que seu time de Pokémon de água tem uma fraqueza contra o ginásio de tipo elétrico de Vermilion. Você <em>analisa</em> o conflito, <em>negocia</em> uma solução (precisa capturar um Diglett) e <em>prioriza</em> essa tarefa. <br><strong>3. Especificação</strong>: Você <em>documenta</em> sua estratégia em um caderno: "Para vencer a Liga, obter as 8 insígnias na seguinte ordem: ... Meu time final será composto por: ...". Este caderno é sua ERS. <br><strong>4. Validação</strong>: Antes de entrar na caverna do Rock Tunnel, um NPC te avisa que você precisa da técnica "Flash" para enxergar. Você <em>valida</em> seu plano e percebe que faltou um requisito importante, retornando para ajustá-lo antes de prosseguir. Você está checando se seu plano ("requisitos especificados") é o correto para o desafio. <br><strong>5. Gerenciamento</strong>: Após vencer 7 ginásios, você descobre que seu rival, Gary, já tem um Pokémon muito mais forte. Essa <em>mudança</em> no "ambiente competitivo" exige que você <em>gerencie</em> seu plano, reavaliando sua equipe e estratégia.`,
            assertiva: {
                fonte: "(CESPE/CEBRASPE - ABIN/2024 - Adaptada)",
                texto: "Durante o processo de engenharia de requisitos, a atividade de validação tem como objetivo principal a documentação formal das necessidades dos stakeholders em uma Especificação de Requisitos de Software (ERS). Essa atividade ocorre, idealmente, após a elicitação e antes da análise, para garantir que todos os requisitos levantados sejam devidamente registrados."
            },
            analise: {
                gabarito: "ERRADO",
                explicacao: "A assertiva comete dois erros capitais. Primeiro, ela confunde o objetivo da **validação** com o da **especificação**. A validação visa confirmar se os requisitos documentados são os corretos e atendem às necessidades do cliente (\"estamos construindo a coisa certa?\"), enquanto a **especificação** é a atividade de documentar formalmente os requisitos. Segundo, a ordem das atividades está incorreta. A validação é tipicamente realizada *após* a especificação, para que se possa validar o documento de requisitos já formalizado. A maldade da banca está em criar uma descrição plausível para um leigo, mas tecnicamente incorreta, trocando os papéis de duas fases fundamentais do processo de ER para testar o conhecimento preciso do candidato sobre o fluxo de trabalho."
            }
        },
        {
            id: 5,
            titulo: "Elicitação de Requisitos: Técnicas e Dificuldades",
            teoria: `<p>A elicitação de requisitos, também conhecida como levantamento, é a atividade de descobrir os requisitos de um sistema através da comunicação com clientes, usuários e outros stakeholders. É uma das fases mais críticas e propensas a erros. As principais dificuldades, frequentemente exploradas pela Cebraspe, são:</p><ul><li><strong>Problemas de Escopo</strong>: Stakeholders podem ter dificuldades em definir as fronteiras do sistema, resultando em um escopo mal definido.</li><li><strong>Problemas de Entendimento</strong>: Stakeholders podem não saber exatamente o que querem, podem achar difícil articular suas necessidades, ou podem expressá-las de forma ambígua. Existe também o conhecimento tácito (o usuário sabe como fazer algo, mas não consegue explicar o processo).</li><li><strong>Problemas de Volatilidade</strong>: Os requisitos mudam naturalmente ao longo do tempo devido a mudanças no negócio, no ambiente ou na legislação.</li></ul><p>Técnicas comuns incluem entrevistas, questionários, workshops (como sessões JAD - Joint Application Design), prototipação, brainstorming e observação (etnografia). A banca costuma criar questões que apresentam uma única técnica como uma "bala de prata", ou seja, uma solução definitiva para todos os problemas de elicitação, o que é uma falácia.</p>`,
            analogiaPokemon: `A elicitação é o processo de um treinador tentando entender que tipo de time Pokémon a Elite dos Quatro (os stakeholders mais importantes) espera que um desafiante tenha.<br> - <strong>Entrevista</strong>: O treinador pergunta a Lance, o campeão, "Que tipo de Pokémon devo usar contra você?". Lance pode dar uma resposta vaga como "Use Pokémon fortes!", o que é ambíguo (<strong>Problema de Entendimento</strong>).<br> - <strong>Observação (Etnografia)</strong>: O treinador assiste a batalhas anteriores de Lance e percebe que, embora ele seja um mestre de dragões, ele sempre usa seu Gyarados (Água/Voador) para counterar tipos específicos. Este é um requisito implícito, ou conhecimento tácito, que Lance não verbalizou.<br> - <strong>Workshop</strong>: O treinador reúne toda a Elite dos Quatro para discutir. Lorelei insiste na importância de tipos de Gelo, enquanto Bruno defende a força dos lutadores, criando um <strong>conflito de requisitos</strong> sobre qual tipo é mais "importante".<br> - <strong>Prototipação</strong>: O treinador monta um time provisório (protótipo) com seis Pokémon e batalha contra um membro da Elite para "validar" sua abordagem e obter feedback rápido.`,
            assertiva: {
                fonte: "(CESPE/CEBRASPE - SERPRO/2025 - Adaptada)",
                texto: "A utilização de questionários distribuídos em massa para os futuros usuários de um sistema é considerada a técnica mais eficaz para a descoberta de requisitos inovadores e para o aprofundamento de questões complexas e não compreendidas, devido ao grande volume de dados que pode ser coletado."
            },
            analise: {
                gabarito: "ERRADO",
                explicacao: "A assertiva está incorreta. Questionários são uma técnica útil para coletar dados de um grande número de pessoas e para validar requisitos já conhecidos, mas são inadequados para a descoberta de requisitos inovadores ou para a exploração de problemas complexos e mal compreendidos. Essas tarefas exigem interação, debate e exploração, características de técnicas como workshops, brainstorming, entrevistas abertas e prototipação. A maldade da questão está em associar uma vantagem real dos questionários (coleta de dados em massa) à solução de um problema para o qual eles são inerentemente fracos (descoberta e aprofundamento de temas complexos). O candidato precisa conhecer o propósito e a adequação de cada técnica de elicitação."
            }
        },
        {
            id: 6,
            titulo: "Validação vs. Verificação de Requisitos",
            teoria: `<p>A distinção entre validação e verificação é um dos pontos mais cobrados e confundidos em provas de engenharia de software.</p><ul><li><strong>Validação de Requisitos</strong>: É o processo de checar se os requisitos definidos e especificados realmente correspondem às necessidades e expectativas do cliente e dos stakeholders. A pergunta fundamental da validação é: <strong>"Estamos construindo o produto certo?"</strong>. O foco está no valor de negócio e na solução do problema real do usuário. Técnicas comuns incluem revisões com clientes, prototipação e desenvolvimento de cenários de teste de aceitação.</li><li><strong>Verificação de Requisitos</strong>: É o processo de checar se os requisitos estão bem definidos, completos, consistentes entre si e se seguem os padrões de documentação. A pergunta fundamental da verificação é: <strong>"Estamos construindo o produto corretamente?"</strong> (no contexto da especificação, seria "Os requisitos estão escritos corretamente?"). O foco está na qualidade do próprio documento de requisitos. Técnicas incluem inspeções formais e checklists.</li></ul><p>A Cebraspe explora essa dualidade de forma incisiva, geralmente trocando o objetivo de um pelo outro em uma mesma assertiva.</p>`,
            analogiaPokemon: `Você é um chef e um cliente pede "um prato delicioso".<br>- <strong>Especificação</strong>: Você escreve a receita de um "Strogonoff de Slowpoke Tail".<br>- <strong>Verificação</strong>: Você entrega a receita a outro chef. Ele lê e checa se a lista de ingredientes está completa, se as instruções são claras e se os tempos de cozimento são consistentes. Ele está <em>verificando</em> a receita (o documento). Ele está garantindo que a receita está <em>escrita corretamente</em>.<br>- <strong>Validação</strong>: Você prepara o prato seguindo a receita e o entrega ao cliente. O cliente prova e diz: "É exatamente isso que eu queria! Delicioso!". Você <em>validou</em> que sua solução atendeu à necessidade real do cliente. Você garantiu que estava construindo o <em>prato certo</em>. Se o cliente dissesse "Está bem feito, mas eu odeio Strogonoff, queria uma salada", seu prato seria verificado (feito corretamente segundo a receita), mas não validado (não era o que o cliente queria).`,
            assertiva: {
                fonte: "(CESPE/CEBRASPE - TCU/2025 - Adaptada)",
                texto: "A verificação de requisitos é o processo que busca assegurar que o documento de especificação de requisitos representa com fidedignidade as reais necessidades dos stakeholders, garantindo, assim, que o sistema a ser desenvolvido estará alinhado aos objetivos de negócio da organização."
            },
            analise: {
                gabarito: "ERRADO",
                explicacao: "A assertiva está incorreta, pois descreve o processo de **validação** e o rotula como **verificação**. O ato de assegurar que os requisitos representam as \"reais necessidades dos stakeholders\" e os \"objetivos de negócio\" é a essência da validação (\"estamos construindo o produto certo?\"). A verificação, em contrapartida, foca na conformidade dos artefatos com suas especificações (por exemplo, se o documento de requisitos é consistente, completo e sem ambiguidades – \"os requisitos estão escritos corretamente?\"). A maldade da banca é a troca direta e sutil desses dois conceitos fundamentais, explorando a confusão comum entre os termos para induzir o candidato ao erro."
            }
        },
        {
            id: 7,
            titulo: "Propriedades de um Bom Requisito",
            teoria: `<p>Um requisito de alta qualidade, seja ele funcional ou não funcional, deve atender a um conjunto de propriedades. Um requisito que falha em uma ou mais delas é considerado mal formulado. As principais são:</p><ul><li><strong>Completo</strong>: Contém toda a informação necessária para que a equipe de desenvolvimento possa projetá-lo e implementá-lo sem precisar de mais esclarecimentos.</li><li><strong>Consistente</strong>: Não pode haver contradição ou conflito com outros requisitos.</li><li><strong>Não Ambíguo (Inequívoco)</strong>: Deve ter apenas uma única interpretação possível para todos que o leem.</li><li><strong>Viável (Factível)</strong>: Deve ser possível de ser implementado dadas as restrições de tecnologia, orçamento e cronograma do projeto.</li><li><strong>Verificável (Testável)</strong>: Deve ser possível determinar, de forma objetiva e finita, se o requisito foi atendido ou não pela implementação. Esta é a propriedade mais explorada pela Cebraspe. Requisitos que usam termos subjetivos como "rápido", "eficiente", "fácil de usar" ou "amigável" são, por definição, não verificáveis, a menos que sejam quantificados.</li></ul><p>A banca frequentemente formula um requisito com uma intenção clara, mas usando linguagem subjetiva, e afirma que ele está bem formulado, testando se o candidato consegue identificar a falta de verificabilidade.</p>`,
            analogiaPokemon: `Uma missão dada a você pelo Professor Carvalho deve ser bem formulada:<br>- <strong>Mal formulada</strong>: "Ash, torne-se um Mestre Pokémon." (Não é completo, é ambíguo e não é verificável. O que define um "Mestre"?).<br>- <strong>Bem formulada (Verificável)</strong>: "Ash, para ser considerado um Mestre Pokémon para fins desta missão, você deve: 1) Capturar todos os 151 Pokémon da região de Kanto; 2) Vencer a Elite dos Quatro; 3) Derrotar seu rival na batalha final." Cada um desses itens pode ser objetivamente verificado: sim ou não.<br>- <strong>Não Verificável</strong>: "O sistema (seu Pikachu) deve ser amigável com outros Pokémon."<br>- <strong>Verificável</strong>: "O sistema (seu Pikachu) não deve iniciar um ataque contra outro Pokémon a menos que seja atacado primeiro."`,
            assertiva: {
                fonte: "(CESPE/CEBRASPE - STF/2025 - Adaptada)",
                texto: "Ao definir os requisitos para um novo sistema de processo eletrônico, a especificação \"O sistema deve ser robusto e apresentar uma interface de usuário intuitiva para os magistrados\" é considerada adequada, pois expressa claramente atributos de qualidade essenciais para a aceitação do software."
            },
            analise: {
                gabarito: "ERRADO",
                explicacao: "A assertiva está incorreta. O requisito, embora expresse intenções de qualidade desejáveis (robustez e usabilidade), está mal formulado por não ser **verificável**. Os termos \"robusto\" e \"intuitiva\" são subjetivos e abertos a múltiplas interpretações. Como seria possível testar objetivamente se a interface é \"intuitiva\"? Para ser verificável, o requisito deveria ser quantificado. Exemplo: \"95% dos magistrados devem conseguir submeter uma sentença através do sistema em menos de 5 minutos, após um treinamento de 1 hora\" (para intuitividade) ou \"O sistema deve permanecer operacional mesmo com 90% da capacidade de processamento do servidor em uso\" (para robustez). A maldade da questão é usar termos de qualidade que parecem profissionais e corretos, mas que, na prática da engenharia de requisitos, são inúteis por não permitirem um teste objetivo de sucesso ou falha."
            }
        }
    ]
});